/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/pages/dashboard-2.init.js":
/*!************************************************!*\
  !*** ./resources/js/pages/dashboard-2.init.js ***!
  \************************************************/
/***/ (() => {

eval("/*\r\nTemplate Name: Ubold - Responsive Bootstrap 4 Admin Dashboard\r\nAuthor: CoderThemes\r\nWebsite: https://coderthemes.com/\r\nContact: support@coderthemes.com\r\nFile: Dashboard 2 init\r\n*/\n$(document).ready(function () {\n  var DrawSparkline = function DrawSparkline() {\n    // Line Chart\n    var colors = ['#00acc1', '#f1556c'];\n    var dataColors = $(\"#lifetime-sales\").data('colors');\n\n    if (dataColors) {\n      colors = dataColors.split(\",\");\n    }\n\n    $('#lifetime-sales').sparkline([0, 23, 43, 35, 44, 45, 56, 37, 40], {\n      type: 'line',\n      width: \"100%\",\n      height: '220',\n      chartRangeMax: 50,\n      lineColor: colors[0],\n      fillColor: hexToRGB(colors[0], 0.3),\n      highlightLineColor: 'rgba(0,0,0,.1)',\n      highlightSpotColor: 'rgba(0,0,0,.2)',\n      maxSpotColor: false,\n      minSpotColor: false,\n      spotColor: false,\n      lineWidth: 1\n    });\n    $('#lifetime-sales').sparkline([25, 23, 26, 24, 25, 32, 30, 24, 19], {\n      type: 'line',\n      width: \"100%\",\n      height: '220',\n      chartRangeMax: 40,\n      lineColor: colors[1],\n      fillColor: hexToRGB(colors[1], 0.3),\n      composite: true,\n      highlightLineColor: 'rgba(0,0,0,.1)',\n      highlightSpotColor: 'rgba(0,0,0,.2)',\n      maxSpotColor: false,\n      minSpotColor: false,\n      spotColor: false,\n      lineWidth: 1\n    }); // Bar Chart\n\n    var colors = ['#00acc1'];\n    var dataColors = $(\"#income-amounts\").data('colors');\n\n    if (dataColors) {\n      colors = dataColors.split(\",\");\n    }\n\n    $('#income-amounts').sparkline([3, 6, 7, 8, 6, 4, 7, 10, 12, 7, 4, 9, 12, 13, 11, 12], {\n      type: 'bar',\n      height: '220',\n      barWidth: '10',\n      barSpacing: '3',\n      barColor: colors\n    }); // Pie Chart\n\n    var colors = ['#00acc1', '#4b88e4', '#e3eaef', '#fd7e14'];\n    var dataColors = $(\"#total-users\").data('colors');\n\n    if (dataColors) {\n      colors = dataColors.split(\",\");\n    }\n\n    $('#total-users').sparkline([20, 40, 30, 10], {\n      type: 'pie',\n      width: '220',\n      height: '220',\n      sliceColors: colors\n    });\n  };\n\n  DrawSparkline();\n  var resizeChart;\n  $(window).resize(function (e) {\n    clearTimeout(resizeChart);\n    resizeChart = setTimeout(function () {\n      DrawSparkline();\n    }, 300);\n  });\n}); // Vector map\n//various examples\n\nvar colors = ['#6658dd'];\nvar dataColors = $(\"#world-map-markers\").data('colors');\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\n$('#world-map-markers').vectorMap({\n  map: 'world_mill_en',\n  normalizeFunction: 'polynomial',\n  hoverOpacity: 0.7,\n  hoverColor: false,\n  regionStyle: {\n    initial: {\n      fill: '#ced4da'\n    }\n  },\n  markerStyle: {\n    initial: {\n      r: 9,\n      'fill': colors[0],\n      'fill-opacity': 0.9,\n      'stroke': '#fff',\n      'stroke-width': 7,\n      'stroke-opacity': 0.4\n    },\n    hover: {\n      'stroke': '#fff',\n      'fill-opacity': 1,\n      'stroke-width': 1.5\n    }\n  },\n  backgroundColor: 'transparent',\n  markers: [{\n    latLng: [41.90, 12.45],\n    name: 'Vatican City'\n  }, {\n    latLng: [43.73, 7.41],\n    name: 'Monaco'\n  }, {\n    latLng: [-0.52, 166.93],\n    name: 'Nauru'\n  }, {\n    latLng: [-8.51, 179.21],\n    name: 'Tuvalu'\n  }, {\n    latLng: [43.93, 12.46],\n    name: 'San Marino'\n  }, {\n    latLng: [47.14, 9.52],\n    name: 'Liechtenstein'\n  }, {\n    latLng: [7.11, 171.06],\n    name: 'Marshall Islands'\n  }, {\n    latLng: [17.3, -62.73],\n    name: 'Saint Kitts and Nevis'\n  }, {\n    latLng: [3.2, 73.22],\n    name: 'Maldives'\n  }, {\n    latLng: [35.88, 14.5],\n    name: 'Malta'\n  }, {\n    latLng: [12.05, -61.75],\n    name: 'Grenada'\n  }, {\n    latLng: [13.16, -61.23],\n    name: 'Saint Vincent and the Grenadines'\n  }, {\n    latLng: [13.16, -59.55],\n    name: 'Barbados'\n  }, {\n    latLng: [17.11, -61.85],\n    name: 'Antigua and Barbuda'\n  }, {\n    latLng: [-4.61, 55.45],\n    name: 'Seychelles'\n  }, {\n    latLng: [7.35, 134.46],\n    name: 'Palau'\n  }, {\n    latLng: [42.5, 1.51],\n    name: 'Andorra'\n  }, {\n    latLng: [14.01, -60.98],\n    name: 'Saint Lucia'\n  }, {\n    latLng: [6.91, 158.18],\n    name: 'Federated States of Micronesia'\n  }, {\n    latLng: [1.3, 103.8],\n    name: 'Singapore'\n  }, {\n    latLng: [0.33, 6.73],\n    name: 'SÃ£o TomÃ© and PrÃ­ncipe'\n  }]\n});\n/* utility function */\n\nfunction hexToRGB(hex, alpha) {\n  var r = parseInt(hex.slice(1, 3), 16),\n      g = parseInt(hex.slice(3, 5), 16),\n      b = parseInt(hex.slice(5, 7), 16);\n\n  if (alpha) {\n    return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + alpha + \")\";\n  } else {\n    return \"rgb(\" + r + \", \" + g + \", \" + b + \")\";\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/pages/dashboard-2.init.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/pages/dashboard-2.init.js"]();
/******/ 	
/******/ })()
;